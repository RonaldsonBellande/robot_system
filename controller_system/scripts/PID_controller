#!/usr/bin/env python

import rospy, rosnode
from std_msgs.msg import Float32


class PID(object):
    def __init__(self):
        
        self.iteration = 0
        self.Kp, self.Ki, self.Kd = 0.275, 0.00003, 0.600
        
        self.error = [[], []]
        self.time = [[], []]
        self.total_error = 0
        self.error_value = 0

        self.controller = rospy.get_param('/controller_ready')
        self.subcriber = rospy.Subscriber("/error", Float32, self.pid_control)
        self.publisher = rospy.Publisher("/control_input", Float32, queue_size = 10)


    def pid_control(self, data):
        
        self.error[1] = data.data
        if self.iteration == 0:
            self.time[0] = rospy.get_rostime().to_nsec()
            self.iteration = 1
        else:
            self.time[1] = rospy.get_time()
            self.total_error += self.error[1]
            self.error_value = (self.error[1] - self.error[0]) / (self.time[1] - self.time[0])
        
        self.error[0] = self.error[1]
        ut = (self.Kp * self.error[1]) + (self.Ki * self.total_error) + (self.Kd * self.error_value)
        self.publisher.publish(ut)


if __name__ == "__main__":
    try:
        rospy.init_node("PID_controller", anonymous=True)    
        PID()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


